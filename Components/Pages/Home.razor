@page "/"
@attribute [StreamRendering(true)]
@rendermode InteractiveServer
@inject NavigationManager Nav
@inject ILocalStorageService localStorage
@using System.Net.Http.Headers

<PageTitle>Index</PageTitle>

<div class="container">
    @if (movies == null || movies.Length == 0)
    {
        <div class="d-flex justify-content-center my-4">
            <div class="loader"></div>
        </div>

        <style>
            .d-flex {
                padding-top: 250px;
            }
        </style>
    }
    else
    {
        <div class="row row-cols-1 row-cols-md-4 g-4">
            @foreach (var movie in movies.Take(currentIndex))
            {
                <div class="col">
                    <a href="/Watch/@movie.movID" style="text-decoration:none">
                        <div class="card h-100">
                            <img src="data:image/bmp;base64, @(Convert.ToBase64String(@movie.photo))" class="card-img-top" alt="@movie.title">
                            <div class="card-body">
                                <h5 class="card-title">@movie.title</h5>
                            </div>
                        </div>
                    </a>
                </div>
            }
        </div>
        <br />
        <br />

        @if (currentIndex < movies.Length)
        {
            <div class="d-flex justify-content-center my-4">
                <MudButton Disabled="@_loading" OnClick="loadMore" Variant="Variant.Filled" Color="Color.Secondary">
                    @if (_loading)
                    {
                        <div class="loader"></div>
                    }
                    else
                    {
                        <MudText>Load More</MudText>
                    }
                </MudButton>
            </div>
        }
    }
</div>

@code {
    private mov[] movies;
    private int currentIndex = 8;
    private const int PageSize = 8;
    private bool _loading = false;
    private string txtsearch { get; set; } = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadMovies();
        }
    }

    private async Task LoadMovies()
    {
        try
        {
            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri($"{Nav.BaseUri}");
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer",
                    await localStorage.GetItemAsStringAsync("token"));
                var response = await client.GetAsync($"api/Mov/MovieList");
                if (response.IsSuccessStatusCode)
                {
                    await Task.Delay(2000);
                    var contentResponse = await response.Content.ReadAsStringAsync();
                    movies = JsonConvert.DeserializeObject<mov[]>(contentResponse);
                    StateHasChanged();
                }
                else
                {
                    // Handle error
                }
            }
        }
        catch (Exception ex)
        {
            // Handle exception
        }
    }

    private async void loadMore()
    {
        _loading = true;
        await Task.Delay(2000);
        currentIndex = Math.Min(currentIndex + PageSize, movies.Length);
        StateHasChanged();
    }
}